classdef Tools_2
    methods (Static)
        %% > 1. -----------------------------------------------------------
        % >> Compute polynomial regression coefficients/exponents.
        %  > -------------|------------------------------------------------------------------------------------------------|
        %  > Term       = | 1 | x | y | x^2 | xy  | y^2 | x^3  | x^2y | xy^2 | y^3  | x^4  | x^3y  | x^2y^2 | xy^3  | y^4  | (...)
        %  > -------------|------------------------------------------------------------------------------------------------|
        %  > C          = | 1 | 1 | 1 | 1   | 1   | 1   | 1    | 1    | 1    | 1    | 1    | 1     | 1      | 1     | 1    | (...)
        %  > exp_x      = | 0 | 1 | 0 | 2   | 1   | 0   | 3    | 2    | 1    | 0    | 4    | 3     | 2      | 1     | 0    | (...)
        %  > exp_y      = | 0 | 0 | 1 | 0   | 1   | 2   | 0    | 1    | 2    | 3    | 0    | 1     | 2      | 3     | 4    | (...)
        %  > -------------|------------------------------------------------------------------------------------------------|
        %  > Term  (dx) = | 0 | 1 | 0 | 2x  | y   | 0   | 3x^2 | 2xy  | y^2  | 0    | 4x^3 | 3x^2y | 2xy^2  | y^3   | 0    | (...)
        %  > -------------|------------------------------------------------------------------------------------------------|
        %  > C          = | 0 | 1 | 0 | 2   | 1   | 0   | 3    | 2    | 1    | 0    | 4    | 3     | 2      | 1     | 0    | (...)
        %  > dx (exp_x) = | 0 | 0 | 0 | 1   | 0   | 0   | 2    | 1    | 0    | 0    | 3    | 2     | 1      | 0     | 0    | (...)
        %  > dx (exp_y) = | 0 | 0 | 0 | 0   | 1   | 0   | 0    | 1    | 2    | 0    | 0    | 1     | 2      | 3     | 0    | (...)
        %  > -------------|------------------------------------------------------------------------------------------------|
        %  > Term  (dy) = | 0 | 0 | 1 | 0   | x   | 2y  | 0    | x^2  | 2xy  | 3y^2 | 0    | x^3   | 2x^2y  | 3xy^2 | 4y^3 | (...)
        %  > -------------|------------------------------------------------------------------------------------------------|
        %  > C          = | 0 | 0 | 1 | 0   | 1   | 2   | 0    | 1    | 2    | 3    | 0    | 1     | 2      | 3     | 4    | (...)
        %  > dy (exp_x) = | 0 | 0 | 0 | 0   | 1   | 0   | 0    | 2    | 1    | 0    | 0    | 3     | 2      | 1     | 0    | (...)
        %  > dy (exp_y) = | 0 | 0 | 0 | 0   | 0   | 1   | 0    | 0    | 1    | 2    | 0    | 0     | 1      | 2     | 3    | (...)
        %  > -------------|------------------------------------------------------------------------------------------------|
        %  > #of terms  = | 1 | 2 | 3 | 4   | 5   | 6   | 7    | 8    | 9    | 10   | 11   | 12    | 13     | 14    | 15   | (...)
        %  > -------------|------------------------------------------------------------------------------------------------| (...)
        %                 | p = 1     | p = 3                                       | p = 5                                   ...
        %  > -------------|------------------------------------------------------------------------------------------------|
        %  > --------------------------------------------------------------
        %  > \phi_f (exponents).
        %  > --------------------------------------------------------------
        %  > x:        > y:
        %  | 0         | 0
        %  | 1 0       | 0 1
        %  | 2 1 0     | 0 1 2
        %  | 3 2 1 0   | 0 1 2 3
        %  | 4 3 2 1 0 | 0 1 2 3 4
        %  | ...       | ...
        %  > --------------------------------------------------------------
        %  > \nabla\phi_f (exponents).
        %  > --------------------------------------------------------------
        %  > d(x)/dx:  > d(x)/dy:  | d(y)/dx:  | d(y)/dy:
        %  | 0         | 0         | 0         | 0
        %  | 0 0       | 0 0       | 0 0       | 0 0
        %  | 1 0 0     | 0 1 0     | 0 1 0     | 0 0 1
        %  | 2 1 0 0   | 0 1 2 0   | 0 2 1 0   | 0 0 1 2
        %  | 3 2 1 0 0 | 0 1 2 3 0 | 0 3 2 1 0 | 0 0 1 2 3
        %  | ...       | ...       | ...       | ...
        %  > --------------------------------------------------------------
        % >> 1.1. ---------------------------------------------------------
        %  > \phi_f.
        function [t] = Terms_1(p)
            %  > Function handle (f): number of coefficients.
            f = @(x) (x.^2+x)./2;
            %  > (c).
            t.c = ones(1,f(p+1));
            %  > (e).
            for j = 0:p
                %  > Indices.
                k        = f(j)+1:f(j+1);
                %  > (e).
                t.e(1,k) = j:-1:0; % > x.
                t.e(2,k) = 0:j;    % > y.
            end
        end
        % >> 1.2. ---------------------------------------------------------
        %  > \nabla\phi_f.
        function [t] = Terms_2(p,i)
            %  > Function handle (f): number of coefficients.
            f = @(x) (x.^2+x)./2;
            %  > Select...
            switch i
                case 1
                    % >> \nabla\phi_f (x).
                    for j = 0:p
                        %  > Indices.
                        k        = f(j)+1:f(j+1);
                        %  > (c).
                        t.c(1,k) = j:-1:0;
                        %  > (e).
                        if j == 0
                            t.e(:,k) = zeros(2,j+1);
                        else
                            t.e(:,k) = [[j-1:-1:0,0];[0:j-1,0]];
                        end
                    end
                case 2
                    % >> \nabla\phi_f (y).
                    for j = 0:p
                        %  > Indices.
                        k        = f(j)+1:f(j+1);
                        %  > (c).
                        t.c(1,k) = 0:j;
                        %  > (e).
                        if j == 0
                            t.e(:,k) = zeros(2,j+1);
                        else
                            t.e(:,k) = [[0,j-1:-1:0];[0,0:j-1]];
                        end
                    end
                otherwise
                    return;
            end
        end
        
        %% > 2. -----------------------------------------------------------
        % >> Update field 'x'.
        % >> 2.1. ---------------------------------------------------------
        %  > Update 'x.nv.x.c' field (nodal solution).
        function [xc] = Update_xc(At,Bt)
            xc = At\Bt;
        end
        % >> 2.2. ---------------------------------------------------------
        %  > Update 'x.vf' field (nodal values used to fit face polynomial).
        function [x] = Update_xv(f,s,u,x)
            for i = u.f
                for j = 1:numel(u.s)
                    for k = 1:numel(u.s{j})
                        if ~isempty(u.s{j}{k})
                            for l = u.s{j}{k}'
                                %  > Cell/face indices used to fit "l".
                                m = s.logical{l,j}{k};
                                a = s.i      {l,j}{k}( m);
                                b = s.i      {l,j}{k}(~m); b = sort(b);
                                %  > Cell value(s).
                                x.vf.(i){l,j}{k}(m,1) = x.nv.(i).c(s.i{l,j}{k}(m));
                                %  > Face value(s).
                                if any(~m)
                                    x.vf.(i){l,j}{k}(~m,1) = f.bd.v(ismembc(f.bd.i,b));
                                end
                            end
                        end
                    end
                end
            end
        end
        % >> 2.3. ---------------------------------------------------------
        %  > Update 'x.cf' field (fitted polynomial coefficients).
        function [x] = Update_cf(u,x)
            for i = u.f
                for j = 1:numel(u.s)
                    for k = 1:numel(u.s{j})
                        if ~isempty(u.s{j}{k})
                            for l = u.s{j}{k}'
                                x.cf.(i){l,j}{k} = x.Pf{l,j}{k}*x.vf.(i){l,j}{k};
                            end
                        end
                    end
                end
            end
        end
        % >> 2.4. ---------------------------------------------------------
        %  > Update 'x.f' field (face values (multiplied by V)).
        function [x] = Update_xf(u,x)
            for i = u.f
                for j = 1:numel(u.s)
                    for k = 1:numel(u.s{j})
                        if ~isempty(u.s{j}{k})
                            for l = u.s{j}{k}'
                                x.xf.(i){j}(l,k) = x.Tf_V{l,j}{k}*x.vf.(i){l,j}{k};
                            end
                        end
                    end
                end
            end
        end
        
        %% > 3. -----------------------------------------------------------
        %  > 3.1. ---------------------------------------------------------
        %  > Compute error norms (cell/face L1,L2 and L_infinity norms).
        function [L] = Set_n(E,V)
            if nargin == 1
                L(1,:) = Tools_1.mean(E,1);
                L(2,:) = Tools_1.mean(sqrt(E.^2),1);
                L(3,:) = max         (E);
            else
                L(1,:) = sum(E.*V)./sum(V);
                L(2,:) = sum(sqrt((E.*V).^2))./sum(sqrt(V.^2));
                L(3,:) = max(E);
            end
        end
    end
end