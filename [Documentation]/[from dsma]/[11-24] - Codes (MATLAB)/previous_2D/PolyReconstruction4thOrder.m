 function f=PolyReconstruction4thOrder(C,x,y,xc,yc,type,face)

global L Lref cell_side vert_side cell_num face_num vert_num w;
global verts cells cell_verts cell_faces cell_vol faces face_area face_vert cell_norm;
global face_bound cell_bound face_cells vert_cells;
global phi lap_phi  phi_faces flux_phi_faces face_w_gauss extended_stencil;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                               Artur Guilherme Vasconcelos                                         %
%                                  14 de Outubro de 2016                                            %
%                                  14 de Outubro de 2016                                            %
%                                                                                                   %
% Função calcula a contirbuição de cada celula para a reconstrução do polinomio na face que se esta %
% a trabalhar, esta função tem como objectivo facilitar a construção da matriz A.                   %
% Atenção que esta função não determina o polinomio reconstruido na face, serve apenas para quando  %
% se esta a determinar as entradas na matriz A.                                                     %
% Caso queira saber o polinomio da face tenho de usar outra função                                  %
%                                                                                                   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
    % Normal Exterior da Face %
    vert=face_vert(face,:);
    nx=verts(vert(1),1)-verts(vert(2),1);
    ny=verts(vert(1),2)-verts(vert(2),2);


if strcmp(type,'poly')==1
     if extended_stencil && nx==0
    f=C(1)+C(2)*(x-xc)+C(3)*(y-yc) ...
        +C(4)*(x-xc)^2+C(5)*(y-yc)^2+C(6)*(x-xc)*(y-yc) ...
        +C(7)*(x-xc)^3+C(8)*(y-yc)^3+C(9)*(x-xc)^2*(y-yc)+C(10)*(x-xc)*(y-yc)^2 ...
        +C(11)*(y-yc)^4+C(12)*(x-xc)^3*(y-yc)+C(13)*(x-xc)^2*(y-yc)^2+C(14)*(x-xc)*(y-yc)^3;
     elseif extended_stencil && ny==0
        f=C(1)+C(2)*(x-xc)+C(3)*(y-yc) ...
        +C(4)*(x-xc)^2+C(5)*(y-yc)^2+C(6)*(x-xc)*(y-yc) ...
        +C(7)*(x-xc)^3+C(8)*(y-yc)^3+C(9)*(x-xc)^2*(y-yc)+C(10)*(x-xc)*(y-yc)^2 ...
        +C(11)*(x-xc)^4+C(12)*(x-xc)^3*(y-yc)+C(13)*(x-xc)^2*(y-yc)^2+C(14)*(x-xc)*(y-yc)^3;  
     else
        f=C(1)+C(2)*(x-xc)+C(3)*(y-yc) ...
        +C(4)*(x-xc)^2+C(5)*(y-yc)^2+C(6)*(x-xc)*(y-yc) ...
        +C(7)*(x-xc)^3+C(8)*(y-yc)^3+C(9)*(x-xc)^2*(y-yc)+C(10)*(x-xc)*(y-yc)^2; 
     end
elseif strcmp(type,'xflux')==1
    if extended_stencil && ny==0
    f=C(2) ...
        +2*C(4)*(x-xc)+C(6)*(y-yc) ...
        +3*C(7)*(x-xc)^2+2*C(9)*(x-xc)*(y-yc)+C(10)*(y-yc)^2 ...
        +4*C(11)*(x-xc)^3+3*C(12)*(x-xc)^2*(y-yc)+2*C(13)*(x-xc)*(y-yc)^2+C(14)*(y-yc)^3;
    elseif extended_stencil && nx==0
        f=C(2) ...
        +2*C(4)*(x-xc)+C(6)*(y-yc) ...
        +3*C(7)*(x-xc)^2+2*C(9)*(x-xc)*(y-yc)+C(10)*(y-yc)^2 ...
        +3*C(12)*(x-xc)^2*(y-yc)+2*C(13)*(x-xc)^1*(y-yc)^2+C(14)*(y-yc)^3;
    else
         f=C(2) ...
        +2*C(4)*(x-xc)+C(6)*(y-yc) ...
        +3*C(7)*(x-xc)^2+2*C(9)*(x-xc)*(y-yc)+C(10)*(y-yc)^2;
    end
elseif strcmp(type,'yflux')==1
    if extended_stencil && ny==0
    f=C(3) ...
        +2*C(5)*(y-yc)+C(6)*(x-xc) ...
        +3*C(8)*(y-yc)^2+C(9)*(x-xc)^2+2*C(10)*(x-xc)*(y-yc) ...
        +C(12)*(x-xc)^3+2*C(13)*(x-xc)^2*(y-yc)+3*C(14)*(x-xc)*(y-yc)^2;
    elseif extended_stencil && nx==0
        f=C(3) ...
        +2*C(5)*(y-yc)+C(6)*(x-xc) ...
        +3*C(8)*(y-yc)^2+C(9)*(x-xc)^2+2*C(10)*(x-xc)*(y-yc) ...
        +4*C(11)*(y-yc)^3+C(12)*(x-xc)^3+2*C(13)*(x-xc)^2*(y-yc)+3*C(14)*(x-xc)*(y-yc)^2;
    else
        f=C(3) ...
        +2*C(5)*(y-yc)+C(6)*(x-xc) ...
        +3*C(8)*(y-yc)^2+C(9)*(x-xc)^2+2*C(10)*(x-xc)*(y-yc);
    end
else
    error('\n\n\tERRO: Fluxo Desconhecido\n\n');
end